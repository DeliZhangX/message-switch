# OASIS_START
# DO NOT EDIT (digest: 2de8f85431f2b8f466b15ac653ad9550)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library message_switch
"core/message_switch.cmxs": use_message_switch
# Library message_switch_lwt
"core/message_switch_lwt.cmxs": use_message_switch_lwt
<core/*.ml{,i,y}>: pkg_cohttp.lwt
<core/*.ml{,i,y}>: pkg_lwt
<core/*.ml{,i,y}>: pkg_lwt.unix
# Library message_switch_async
"core/message_switch_async.cmxs": use_message_switch_async
<core/*.ml{,i,y}>: pkg_async
<core/*.ml{,i,y}>: pkg_cohttp.async
# Library message_switch_unix
"core/message_switch_unix.cmxs": use_message_switch_unix
<core/*.ml{,i,y}>: pkg_cohttp
<core/*.ml{,i,y}>: pkg_re
<core/*.ml{,i,y}>: pkg_re.str
<core/*.ml{,i,y}>: pkg_rpclib
<core/*.ml{,i,y}>: pkg_rpclib.json
<core/*.ml{,i,y}>: pkg_rpclib.syntax
<core/*.ml{,i,y}>: pkg_threads
<core/*.ml{,i,y}>: pkg_unix
<core/*.ml{,i,y}>: use_message_switch
# Library message_switch_server
"switch/message_switch_server.cmxs": use_message_switch_server
"switch/clock.cmx": for-pack(Message_switch_server)
"switch/relation.cmx": for-pack(Message_switch_server)
"switch/q.cmx": for-pack(Message_switch_server)
"switch/logging.cmx": for-pack(Message_switch_server)
"switch/switch.cmx": for-pack(Message_switch_server)
# Executable m_cli
<cli/main.{native,byte}>: pkg_cmdliner
<cli/main.{native,byte}>: pkg_cohttp
<cli/main.{native,byte}>: pkg_re
<cli/main.{native,byte}>: pkg_re.str
<cli/main.{native,byte}>: pkg_rpclib
<cli/main.{native,byte}>: pkg_rpclib.json
<cli/main.{native,byte}>: pkg_rpclib.syntax
<cli/main.{native,byte}>: pkg_threads
<cli/main.{native,byte}>: pkg_unix
<cli/main.{native,byte}>: use_message_switch
<cli/main.{native,byte}>: use_message_switch_unix
<cli/*.ml{,i,y}>: pkg_cmdliner
<cli/*.ml{,i,y}>: pkg_cohttp
<cli/*.ml{,i,y}>: pkg_re
<cli/*.ml{,i,y}>: pkg_re.str
<cli/*.ml{,i,y}>: pkg_rpclib
<cli/*.ml{,i,y}>: pkg_rpclib.json
<cli/*.ml{,i,y}>: pkg_rpclib.syntax
<cli/*.ml{,i,y}>: pkg_threads
<cli/*.ml{,i,y}>: pkg_unix
<cli/*.ml{,i,y}>: use_message_switch
<cli/*.ml{,i,y}>: use_message_switch_unix
<cli/main.{native,byte}>: custom
# Executable link_test
<core_test/link_test_main.{native,byte}>: pkg_cohttp
<core_test/link_test_main.{native,byte}>: pkg_cohttp.lwt
<core_test/link_test_main.{native,byte}>: pkg_lwt
<core_test/link_test_main.{native,byte}>: pkg_lwt.syntax
<core_test/link_test_main.{native,byte}>: pkg_lwt.unix
<core_test/link_test_main.{native,byte}>: pkg_re
<core_test/link_test_main.{native,byte}>: pkg_re.str
<core_test/link_test_main.{native,byte}>: pkg_rpclib
<core_test/link_test_main.{native,byte}>: pkg_rpclib.json
<core_test/link_test_main.{native,byte}>: pkg_rpclib.syntax
<core_test/link_test_main.{native,byte}>: use_message_switch
<core_test/link_test_main.{native,byte}>: use_message_switch_lwt
<core_test/link_test_main.{native,byte}>: custom
# Executable client
<core_test/client_main.{native,byte}>: pkg_cohttp
<core_test/client_main.{native,byte}>: pkg_cohttp.lwt
<core_test/client_main.{native,byte}>: pkg_lwt
<core_test/client_main.{native,byte}>: pkg_lwt.syntax
<core_test/client_main.{native,byte}>: pkg_lwt.unix
<core_test/client_main.{native,byte}>: pkg_re
<core_test/client_main.{native,byte}>: pkg_re.str
<core_test/client_main.{native,byte}>: pkg_rpclib
<core_test/client_main.{native,byte}>: pkg_rpclib.json
<core_test/client_main.{native,byte}>: pkg_rpclib.syntax
<core_test/client_main.{native,byte}>: use_message_switch
<core_test/client_main.{native,byte}>: use_message_switch_lwt
<core_test/client_main.{native,byte}>: custom
# Executable client_async
<core_test/client_async_main.{native,byte}>: pkg_async
<core_test/client_async_main.{native,byte}>: pkg_async_unix
<core_test/client_async_main.{native,byte}>: pkg_cohttp
<core_test/client_async_main.{native,byte}>: pkg_cohttp.async
<core_test/client_async_main.{native,byte}>: pkg_re
<core_test/client_async_main.{native,byte}>: pkg_re.str
<core_test/client_async_main.{native,byte}>: pkg_rpclib
<core_test/client_async_main.{native,byte}>: pkg_rpclib.json
<core_test/client_async_main.{native,byte}>: pkg_rpclib.syntax
<core_test/client_async_main.{native,byte}>: pkg_threads
<core_test/client_async_main.{native,byte}>: use_message_switch
<core_test/client_async_main.{native,byte}>: use_message_switch_async
<core_test/client_async_main.{native,byte}>: custom
# Executable client_unix
<core_test/client_unix_main.{native,byte}>: pkg_cohttp
<core_test/client_unix_main.{native,byte}>: pkg_re
<core_test/client_unix_main.{native,byte}>: pkg_re.str
<core_test/client_unix_main.{native,byte}>: pkg_rpclib
<core_test/client_unix_main.{native,byte}>: pkg_rpclib.json
<core_test/client_unix_main.{native,byte}>: pkg_rpclib.syntax
<core_test/client_unix_main.{native,byte}>: pkg_threads
<core_test/client_unix_main.{native,byte}>: pkg_unix
<core_test/client_unix_main.{native,byte}>: use_message_switch
<core_test/client_unix_main.{native,byte}>: use_message_switch_unix
<core_test/client_unix_main.{native,byte}>: custom
# Executable server
<core_test/server_main.{native,byte}>: pkg_cohttp
<core_test/server_main.{native,byte}>: pkg_cohttp.lwt
<core_test/server_main.{native,byte}>: pkg_lwt
<core_test/server_main.{native,byte}>: pkg_lwt.syntax
<core_test/server_main.{native,byte}>: pkg_lwt.unix
<core_test/server_main.{native,byte}>: pkg_re
<core_test/server_main.{native,byte}>: pkg_re.str
<core_test/server_main.{native,byte}>: pkg_rpclib
<core_test/server_main.{native,byte}>: pkg_rpclib.json
<core_test/server_main.{native,byte}>: pkg_rpclib.syntax
<core_test/server_main.{native,byte}>: use_message_switch
<core_test/server_main.{native,byte}>: use_message_switch_lwt
<core_test/*.ml{,i,y}>: pkg_cohttp.lwt
<core_test/*.ml{,i,y}>: pkg_lwt
<core_test/*.ml{,i,y}>: pkg_lwt.syntax
<core_test/*.ml{,i,y}>: pkg_lwt.unix
<core_test/*.ml{,i,y}>: use_message_switch_lwt
<core_test/server_main.{native,byte}>: custom
# Executable server_async
<core_test/server_async_main.{native,byte}>: pkg_async
<core_test/server_async_main.{native,byte}>: pkg_async_unix
<core_test/server_async_main.{native,byte}>: pkg_cohttp
<core_test/server_async_main.{native,byte}>: pkg_cohttp.async
<core_test/server_async_main.{native,byte}>: pkg_re
<core_test/server_async_main.{native,byte}>: pkg_re.str
<core_test/server_async_main.{native,byte}>: pkg_rpclib
<core_test/server_async_main.{native,byte}>: pkg_rpclib.json
<core_test/server_async_main.{native,byte}>: pkg_rpclib.syntax
<core_test/server_async_main.{native,byte}>: pkg_threads
<core_test/server_async_main.{native,byte}>: use_message_switch
<core_test/server_async_main.{native,byte}>: use_message_switch_async
<core_test/*.ml{,i,y}>: pkg_async
<core_test/*.ml{,i,y}>: pkg_async_unix
<core_test/*.ml{,i,y}>: pkg_cohttp.async
<core_test/*.ml{,i,y}>: use_message_switch_async
<core_test/server_async_main.{native,byte}>: custom
# Executable server_unix
<core_test/server_unix_main.{native,byte}>: pkg_cohttp
<core_test/server_unix_main.{native,byte}>: pkg_re
<core_test/server_unix_main.{native,byte}>: pkg_re.str
<core_test/server_unix_main.{native,byte}>: pkg_rpclib
<core_test/server_unix_main.{native,byte}>: pkg_rpclib.json
<core_test/server_unix_main.{native,byte}>: pkg_rpclib.syntax
<core_test/server_unix_main.{native,byte}>: pkg_threads
<core_test/server_unix_main.{native,byte}>: pkg_unix
<core_test/server_unix_main.{native,byte}>: use_message_switch
<core_test/server_unix_main.{native,byte}>: use_message_switch_unix
<core_test/*.ml{,i,y}>: pkg_cohttp
<core_test/*.ml{,i,y}>: pkg_re
<core_test/*.ml{,i,y}>: pkg_re.str
<core_test/*.ml{,i,y}>: pkg_rpclib
<core_test/*.ml{,i,y}>: pkg_rpclib.json
<core_test/*.ml{,i,y}>: pkg_rpclib.syntax
<core_test/*.ml{,i,y}>: pkg_threads
<core_test/*.ml{,i,y}>: pkg_unix
<core_test/*.ml{,i,y}>: use_message_switch
<core_test/*.ml{,i,y}>: use_message_switch_unix
<core_test/server_unix_main.{native,byte}>: custom
# Executable switch
<switch/switch_main.{native,byte}>: pkg_cohttp
<switch/switch_main.{native,byte}>: pkg_cohttp.lwt
<switch/switch_main.{native,byte}>: pkg_lwt
<switch/switch_main.{native,byte}>: pkg_lwt.syntax
<switch/switch_main.{native,byte}>: pkg_lwt.unix
<switch/switch_main.{native,byte}>: pkg_re
<switch/switch_main.{native,byte}>: pkg_re.str
<switch/switch_main.{native,byte}>: pkg_rpclib
<switch/switch_main.{native,byte}>: pkg_rpclib.json
<switch/switch_main.{native,byte}>: pkg_rpclib.syntax
<switch/switch_main.{native,byte}>: use_message_switch
<switch/switch_main.{native,byte}>: use_message_switch_lwt
<switch/switch_main.{native,byte}>: use_message_switch_server
<switch/*.ml{,i,y}>: pkg_cohttp
<switch/*.ml{,i,y}>: pkg_cohttp.lwt
<switch/*.ml{,i,y}>: pkg_lwt
<switch/*.ml{,i,y}>: pkg_lwt.syntax
<switch/*.ml{,i,y}>: pkg_lwt.unix
<switch/*.ml{,i,y}>: pkg_re
<switch/*.ml{,i,y}>: pkg_re.str
<switch/*.ml{,i,y}>: pkg_rpclib
<switch/*.ml{,i,y}>: pkg_rpclib.json
<switch/*.ml{,i,y}>: pkg_rpclib.syntax
<switch/*.ml{,i,y}>: use_message_switch
<switch/*.ml{,i,y}>: use_message_switch_lwt
<switch/*.ml{,i,y}>: use_message_switch_server
<switch/switch_main.{native,byte}>: custom
# OASIS_STOP
